bikes <- read.csv("metro.csv", stringsAsFactors = FALSE)
# names(bikes)
all_stations <- select(bikes, Starting.Station.ID, Ending.Station.ID)
write.csv(all_stations, "all_stations.csv")
bike_table <- table(start = all_stations$Starting.Station.ID, end = all_stations$Ending.Station.ID)
bike_table <- as.data.frame(bike_table)
write.csv(bike_table, "bike_table.csv")
##### Most Frequent Combo Route #####
max_freq <- max(as.vector(bike_table$Freq), na.rm = FALSE)
max_tab <- select(data.frame(filter(bike_table, Freq == max_freq)), "start", "end")
max_start <- sapply(max_tab$start, as.character)
max_end <- sapply(max_tab$end, as.character)
station_data <- read.csv("data/metro-bike-share-stations.csv", stringsAsFactors = FALSE)
station_data <- as.data.frame(station_data)
max_start_station_name <- select(data.frame(filter(station_data, station_data$Station_ID == max_start)), "Station_Name")
max_end_station_name <- select(data.frame(filter(station_data, station_data$Station_ID == max_end)), "Station_Name")
max_start_station_string <- sapply(max_start_station_name, as.character)
max_end_station_string <- sapply(max_end_station_name, as.character)
print(paste0("The most frequent/popular stop and start station combination is the route from ", max_start_station_string,
" to ", max_end_station_string, " with a count of ", max_freq, " rides."))
pop_routes <- read.csv("pop_route.csv", stringsAsFactors = FALSE)
View(pop_routes)
library(dplyr)
library(car)
source("metro-bike-share-stations.csv")
source("pop_route.csv")
bikes <- read.csv("metro.csv", stringsAsFactors = FALSE)
# names(bikes)
all_stations <- select(bikes, Starting.Station.ID, Ending.Station.ID)
write.csv(all_stations, "all_stations.csv")
bike_table <- table(start = all_stations$Starting.Station.ID, end = all_stations$Ending.Station.ID)
bike_table <- as.data.frame(bike_table)
write.csv(bike_table, "bike_table.csv")
##### Most Frequent Combo Route #####
max_freq <- max(as.vector(bike_table$Freq), na.rm = FALSE)
max_tab <- select(data.frame(filter(bike_table, Freq == max_freq)), "start", "end")
max_start <- sapply(max_tab$start, as.character)
max_end <- sapply(max_tab$end, as.character)
station_data <- read.csv("data/metro-bike-share-stations.csv", stringsAsFactors = FALSE)
station_data <- as.data.frame(station_data)
max_start_station_name <- select(data.frame(filter(station_data, station_data$Station_ID == max_start)), "Station_Name")
max_end_station_name <- select(data.frame(filter(station_data, station_data$Station_ID == max_end)), "Station_Name")
max_start_station_string <- sapply(max_start_station_name, as.character)
max_end_station_string <- sapply(max_end_station_name, as.character)
print(paste0("The most frequent/popular stop and start station combination is the route from ", max_start_station_string,
" to ", max_end_station_string, " with a count of ", max_freq, " rides."))
pop_routes <- read.csv("pop_route.csv", stringsAsFactors = FALSE)
pop_routes <- read.csv("pop_route.csv", stringsAsFactors = FALSE)
pop_routes
View(pop_routes)
library(dplyr)
library(car)
bikes <- read.csv("metro.csv", stringsAsFactors = FALSE)
# print(unique(as.vector(bikes$Trip.Route.Category)))
# "Round Trip" "One Way"
# print(unique(as.vector(bikes$Passholder.Type)))
# "Monthly Pass" "Flex Pass"    "Walk-up"
# Combinations Types:
# - Round Trip, Monthly Pass
# - Round Trip, Flex Pass
# - Round Trip, Walk-up
# - One Way, Monthly Pass
# - One Way, Flex Pass
# - One Way, Walk-up
get_combos <- function(trip, pass) {
combo_num <- nrow(bikes %>% filter((Trip.Route.Category == trip & Passholder.Type == pass )))
}
r_mp <- get_combos("Round Trip", "Monthly Pass")
r_fp <- get_combos("Round Trip", "Flex Pass")
r_wu <- get_combos("Round Trip", "Walk-up")
o_mp <- get_combos("One Way", "Monthly Pass")
o_fp <- get_combos("One Way", "Flex Pass")
o_wu <- get_combos("One Way", "Walk-up")
my_combos <- c(r_mp, r_fp, r_wu, o_mp, o_fp, o_wu)
barplot(my_combos, main = paste0("Breakdown of Trip Route Category-Passholder Type Combinations"), horiz=TRUE,
names.arg=c("RT-MP", "OW-MP","RT-FP", "OW-FP", "RT-WU", "OW-WU"),
col=c("#30bf10", "#ce0404", "#30bf10", "#ce0404","#30bf10", "#ce0404"),
xlab = "Number of Riders",
ylab = "Trip Combination")
legend("topright", legend = c("RT = Round Trip", "OW = One Way", "MP = Montly Pass", "FP = Flex Pass", "WU = Walk-up"), col = c("#30bf10", "#ce0404", "white", "white", "white"), lwd=10)
library(dplyr)
library(car)
bikes <- read.csv("metro.csv", stringsAsFactors = FALSE)
names(bikes)
all_stations <- select(bikes, Starting.Station.ID, Ending.Station.ID)
# dir.create(file.path("/Users/elizabethlin/desktop/co", "output"))
write.csv(all_stations, "all_stations.csv")
bike_table <- table(start = all_stations$Starting.Station.ID, end = all_stations$Ending.Station.ID)
start <- mutate(all_stations, start_num = length(unique(all_stations$Start.Station.ID)))
end <- mutate(all_stations, end_num = length(unique(all_stations$End.Station.ID)))
round_trip_num <- nrow(bikes %>% filter((Trip.Route.Category == "Round Trip")))
one_way_num <- nrow(bikes %>% filter((Trip.Route.Category == "One Way")))
compare_vector <- c(round_trip_num, one_way_num)
pie(compare_vector, col=c("#ff91d9", "#90fcff"), labels=c("Round Trip", "One Way"), main = "Distribution of Trip Routes")
##### Packages #####
# install.packages("plyr")
# install.packages("dplyr")
# install.packages("data.table")
##### Sources #####
library(dplyr)
library(car)
library(plyr)
library(data.table)
source("metro-bike-share-stations.csv")
##### End Station Output #####
my_data <- read.csv("data/metro-bike-share-trip-data.csv", stringsAsFactors = FALSE)
my_data <- my_data %>% select(Ending.Station.ID)
my_data <- as.data.frame(my_data)
my_data <- setDT(my_data)[, .N, by=Ending.Station.ID]
most_popular <- select(data.frame(filter(my_data, N == max(my_data$N))), "Ending.Station.ID")
mp_string <- sapply(most_popular, as.character)
station_data <- read.csv("data/metro-bike-share-stations.csv", stringsAsFactors = FALSE)
station_data <- as.data.frame(station_data)
station_name <- select(data.frame(filter(station_data, station_data$Station_ID == mp_string)), "Station_Name")
station_string <- sapply(station_name, as.character)
print(paste0("The most popular End stations is ", station_string))
# "The most popular End stations is 7th & Flower"
##### Start Station Output #####
my_data <- read.csv("data/metro-bike-share-trip-data.csv", stringsAsFactors = FALSE)
my_data <- my_data %>% select(Starting.Station.ID)
my_data <- as.data.frame(my_data)
my_data <- setDT(my_data)[, .N, by=Starting.Station.ID]
most_popular <- select(data.frame(filter(my_data, N == max(my_data$N))), "Starting.Station.ID")
mp_string <- sapply(most_popular, as.character)
station_data <- read.csv("data/metro-bike-share-stations.csv", stringsAsFactors = FALSE)
station_data <- as.data.frame(station_data)
station_name <- select(data.frame(filter(station_data, station_data$Station_ID == mp_string)), "Station_Name")
station_string <- sapply(station_name, as.character)
print(paste0("The most popular Start stations is ", station_string))
# "The most popular Start stations is Broadway & 3rd"
bikes
library(dplyr)
library(car)
bikes <- read.csv("metro.csv", stringsAsFactors = FALSE)
names(bikes)
all_stations <- select(bikes, Starting.Station.ID, Ending.Station.ID)
# dir.create(file.path("/Users/elizabethlin/desktop/co", "output"))
write.csv(all_stations, "all_stations.csv")
bike_table <- table(start = all_stations$Starting.Station.ID, end = all_stations$Ending.Station.ID)
start <- mutate(all_stations, start_num = length(unique(all_stations$Start.Station.ID)))
end <- mutate(all_stations, end_num = length(unique(all_stations$End.Station.ID)))
round_trip_num <- nrow(bikes %>% filter((Trip.Route.Category == "Round Trip")))
one_way_num <- nrow(bikes %>% filter((Trip.Route.Category == "One Way")))
compare_vector <- c(round_trip_num, one_way_num)
pie(compare_vector, col=c("#ff91d9", "#90fcff"), labels=c("Round Trip", "One Way"), main = "Distribution of Trip Routes")
View(bikes)
names(bikes)
bikes <- mutate(bikes, onbike_duration = bikes$Start.Time - bikes$End.Time)
bikes$Start.Time
# a3-using-data
################################### Set up (2 Points) ###################################
## Before you get started, make sure to set you are in the right working directory.
## If needed, set it here.  You may use tilde (~) to refer to your home directory.
# ~/documents/info201/a3-using-data-elizabethlin6/
################################### DataFrame Manipulation (20 Points) ###################################
1# Create a vector `first_names` with 5 names in it
first_names <- c("Elizabeth", "Christin", "Sophia", "James", "Shirley")
# Create a vector `math_grades` with 5 hypothetical grades (0 - 100) in a math course (that correspond to the 5 names above),
math_grades <- c(35, 89, 38, 41, 93)
# Create a vector `spanish_grades` with 5 hypothetical grades (0 - 100) in a Spanish course (that correspond to the 5 names above)
spanish_grades <- c(52, 40, 89, 12, 37)
## Create a data.frame `students` by combining your vectors `first_names`, `math_grades`, and `spanish_grades`
students <- data.frame(first_names, math_grades, spanish_grades)
# Create a variable `num_students` that contains the number of rows in your data.frame `students`
num_students <- nrow(students)
# Create a variable `num_courses` that contains the number of columns in your data.frame `students` minus one (b/c of their names)
num_courses <- ncol(students)-1
## Add a new column `grade_diff` to your dataframe, which is equal to the difference between
## math_grades and spanish_grades.  Note: use the variables inside the dataframe (like "students$math_grade")
## not the ones in your workspace.
students$grade_diff <- math_grades - spanish_grades
# Add another column `better_at_math` as a boolean (TRUE/FALSE) variable that indicates that a student got a better grade in math
students$better_at_math <- math_grades >= spanish_grades
## Compute a variable `num_better_at_math` that is the number (i.e., one numeric value) of students better at math
num_better_at_math <- (length(num_better_at_math[students$better_at_math == TRUE]))
## Write your `students` data.frame to a new .csv file inside your data/ directory with the filename `grades.csv`.
## Make sure not to write row names.
write.csv(students, 'grades.csv')
################################### Loading R Data (28 points) ###################################
## In this section, you'll work with some data that comes built into the R environment.
## Load the `Titanic` data set. You may also want to use RStudio to `View()` it to inspect its rows and columns,
## or just print (selected lines of) it.
View(Titanic)
## This data set actually loads in a format called a *table*
## This is not a data frame. Use the `is.data.frame()` function to confirm this.
is.data.frame(Titanic)
## You should convert the `Titanic` variable into a data frame; you can use the `data.frame()` function or `as.data.frame()`
## Be sure to **not** treat strings as factors!
titanic <- as.data.frame(Titanic)
# is.data.frame(titanic)
# Create a variable `children` that are the rows of the data frame with information about children on the Titanic.
children <- titanic[which(titanic$'Age' == 'Child'),]
# Create a variable `num_children` that is the total number of children on the Titanic.
# Hint: remember the `sum()` function!
num_children <- sum(nrow(children))
## Create a variable `most_lost` which has row with the largest absolute number of losses (people who did not survive).
## Tip: you can use multiple statements (lines of code), such as to make "intermediate" sub-frames
##  (similar to what you did with the `children` variables)
most_lost <- titanic[which(titanic$'Freq' == max(titanic$'Freq')),]
## Define a function called `survival_rate` that takes in a ticket class
## (i.e., "1st", "2nd", "3rd" or "Crew") as an argument.
## This function should return a sentence describing the total survival rate of men vs. "women and children" in that ticketing class.
## For example:
##   "Of Crew class, 87% of women and children survived and 22% of men survived."
survival_rate <- function(ticket_class) {
women <- titanic[titanic$Sex == "Female" & titanic$Age == "Adult" & titanic$Class == ticket_class, ]
men <- titanic[titanic$Sex == 'Male' & titanic$Age == 'Adult' & titanic$Class == ticket_class,]
children <- titanic[titanic$Age == 'Child' & titanic$Class == ticket_class,]
women_survived <- women[(women$Survived == 'Yes'),]
men_survived <- men[(men$Survived == 'Yes'),]
children_survived <- children[(children$Survived == 'Yes'),]
all_ms <- sum(men_survived$Freq)
all_ws <- sum(women_survived$Freq)
all_cs <- sum(children_survived$Freq)
m_percentage <- (all_ms / sum(men$Freq)) * (100)
wc_percentage <- (all_ws + all_cs) / (sum(women$Freq) + sum(children$Freq))  * (100)
new <- paste0("Of ", ticket_class, " class, ", round(wc_percentage), "% of women and children survived and ", round(m_percentage), "% of men survived.")
return(new)
}
## The approach you take to generating the sentence to return is up to you. A good solution will likely utilize
## intermediate variables (subsets of data frames) and filtering to produce the required data.
## Avoid using a loops where you can utilize vectorized functions!
## Call your `survival_rate()` function on each of the ticketing classes (`Crew`, `1st`, `2nd`, and `3rd`)
survival_rate("Crew")
survival_rate("1st")
survival_rate("2nd")
survival_rate("3rd")
### ------------------------------ Reading in Data (40 points) ------------------------------
## In this section, we'll read in a .csv file, which is essentially a tabular row/column layout
## This is like Microsoft Excel or Google Docs, but without the formatting
## The .csv file we'll be working with has the life expectancy for each country in 1960 and 2013.
## We'll ask real-world questions about the data by writing the code that answers our question.
## Here are the steps you should walk through:
# Using the `read.csv` function, read the life-expectancy.csv file into a variable called `life_expectancy`
# Makes sure not to read strings as factors
life_expectancy <- read.csv("data/life-expectancy.csv", stringsAsFactors = FALSE)
## Determine if life_expectancy is a data.frame by using the is.data.frame function.
## You may also want to inspect it's content by View() or by just printing chunks of it.
is.data.frame(life_expectancy)
View(life_expectancy)
# Create a column `life_expectancy$change` that is the change in life expectancy from 1960 to 2013
life_expectancy$change <- life_expectancy$le_2013 - life_expectancy$le_1960
# Create a variable `most_improved` that is the name of the country with the largest gain in life expectancy
the_max <- max(life_expectancy$change)
most_improved <- life_expectancy[life_expectancy$change == the_max, "country"]
## Create a variable `num_small_gain` that has the number of countries
## whose life expectance has improved fewer than 5 years between 1960 and 2013
num_small_gain <- length(which(life_expectancy$change < 5 & life_expectancy$change > 0))
## Write a function `CountryChange` that takes in a country's name as a parameter,
## and returns it's change in life expectancy from 1960 to 2013
CountryChange <- function(country_name) {
return(life_expectancy[life_expectancy$country == country_name, "change"])
}
## Using your `CountryChange` function, create a variable `sweden_change`
## that is the change in life expectancy from 1960 to 2013 in Sweden
sweden_change <- CountryChange('Sweden')
# Define a function `LowestLifeExpInRegion` that takes in a **region** as an argument, and returns
# the **name of the country** with the lowest life expectancy in 2013 (in that region)
LowestLifeExpInRegion <- function(the_region) {
country_ir <- life_expectancy[life_expectancy$region == the_region,]
lowest <- min(life_expectancy[life_expectancy$region == the_region, "le_2013"])
life_expectancy[life_expectancy$region == the_region, "country"]
return(country_ir[country_ir$le_2013 == lowest, "country"])
}
## Using the function you just wrote, create a variable `lowest_in_south_asia`
## that is the country with the lowest life expectancy in 2013 in South Asia
lowest_in_south_asia <- LowestLifeExpInRegion("South Asia")
## Write a function `BiggerChange` that takes in two country names as parameters, and returns a sentence that
## describes which country experienced a larger gain in life expectancy (and by how many years).
## For example, if you passed the values "China", and "Bolivia" into your function, it would return this:
## "The country with the bigger change in life expectancy was China (gain=31.9),
## whose life expectancy grew by 7.4 years more than Bolivia's (gain=24.5)."
## Make sure to round your numbers.
BiggerChange <- function(country_one, country_two) {
c1 <- CountryChange(country_one)
c2 <- CountryChange(country_two)
print(c1)
print(c2)
if (c1 > c2) {
bc <- country_one
sc <- country_two
diff <- c1 - c2
}
else{
bc <- country_two
sc <- country_one
diff <- c2 - c1
}
return(paste0("The country with the bigger change in life expectancy was ", bc, " (gain=", round(c2,1), "), whose life expectancy grew by ", round(diff,1), " more years than ", sc, "'s (gain=", round(c1,1), ")."))
}
## Using your `BiggerChange` function, create a variable `usa_or_france` that describes who had a larger gain in life expectancy
## (the United States or France)
usa_or_france <- BiggerChange('United States', 'France')
## Write your `life_expectancy` data.frame to a new .csv file to your data/ directory
## with the filename `life-expectancy-with-change.csv`.
## Make sure not to write row names.
write.csv(life_expectancy, 'life-expectancy-with-change.csv')
View('life-expectancy-with-change.csv')
################################### Challenge (10 points) ###################################
## Create a variable that has the name of the region with the
## highest average change in life expectancy between the two time points.
## Your are welcome to weight the change by population, but just unweighted average over countries is good as well.
## To do this, you'll need to compute the average change across the countries in each region, and then
## compare the averages across regions.
## Use base-R functions!
avg_rc <- function(region){
new_val <- 0
my_region <- life_expectancy[life_expectancy$region == region,]
for (r in my_region) {
avg_c <- sum(my_region$change) / nrow(my_region)
if(avg_c > new_val) {
final_region == r
new_val <- avg_c
}
}
return(final_region)
}
# Create a *well labeled* plot (readable title, x-axis, y-axis) showing
# Life expectancy in 1960 v.s. Change in life expectancy
# Programmatically save (i.e., with code, not using the Export button) your graph as a .png file in your repo
# Then, in a comment below, provide an *interpretation* of the relationship you observe
# Feel free to use any library of your choice, or base R functions.
png(filename="le_plot.png")
plot(life_expectancy$le_1960, life_expectancy$change,
xlab = "Life expectancy in 1960 (years)",
ylab = "Change in life expectancy (years)",
main = "Life expectancy in 1960 vs. Change in life expectancy")
dev.off()
## What do you notice?
# I notice there is a negative line trend that represent the decrease in change in life expectancy
# as the life expectancy increases in 1960. Therefore there is a negative slope between the x and y variables
# indicated by the graph.
## What is your interpretation of the observed relationship?
# This patterns means that there are less people who have a low life expectancy dying in the
# year 2013 as compared to the year 1960. There is also an overall increase in life expectancy.
life_expectancy$le_1960
library(dplyr)
library(car)
bikes <- read.csv("metro.csv", stringsAsFactors = FALSE)
names(bikes)
all_stations <- select(bikes, Starting.Station.ID, Ending.Station.ID)
# dir.create(file.path("/Users/elizabethlin/desktop/co", "output"))
write.csv(all_stations, "all_stations.csv")
bike_table <- table(start = all_stations$Starting.Station.ID, end = all_stations$Ending.Station.ID)
start <- mutate(all_stations, start_num = length(unique(all_stations$Start.Station.ID)))
end <- mutate(all_stations, end_num = length(unique(all_stations$End.Station.ID)))
round_trip_num <- nrow(bikes %>% filter((Trip.Route.Category == "Round Trip")))
one_way_num <- nrow(bikes %>% filter((Trip.Route.Category == "One Way")))
compare_vector <- c(round_trip_num, one_way_num)
pie(compare_vector, col=c("#ff91d9", "#90fcff"), labels=c("Round Trip", "One Way"), main = "Distribution of Trip Routes")
pct <- round(compare_vector/sum(compare_vector)*100)
lbls <- paste(lbls, pct) # add percents to labels
lbls <- paste(lbls,"%",sep="") # ad % to labels
library(dplyr)
library(car)
bikes <- read.csv("metro.csv", stringsAsFactors = FALSE)
names(bikes)
all_stations <- select(bikes, Starting.Station.ID, Ending.Station.ID)
# dir.create(file.path("/Users/elizabethlin/desktop/co", "output"))
write.csv(all_stations, "all_stations.csv")
bike_table <- table(start = all_stations$Starting.Station.ID, end = all_stations$Ending.Station.ID)
start <- mutate(all_stations, start_num = length(unique(all_stations$Start.Station.ID)))
end <- mutate(all_stations, end_num = length(unique(all_stations$End.Station.ID)))
round_trip_num <- nrow(bikes %>% filter((Trip.Route.Category == "Round Trip")))
one_way_num <- nrow(bikes %>% filter((Trip.Route.Category == "One Way")))
compare_vector <- c(round_trip_num, one_way_num)
pct <- round(compare_vector/sum(compare_vector)*100)
lbls <- c("Round Trip", "One Way")
pie(compare_vector, col=c("#ff91d9", "#90fcff"), labels=lbls, main = "Distribution of Trip Routes")
lbls <- paste(lbls, pct) # add percents to labels
lbls <- paste(lbls,"%",sep="") # ad % to labels
library(dplyr)
library(car)
bikes <- read.csv("metro.csv", stringsAsFactors = FALSE)
names(bikes)
all_stations <- select(bikes, Starting.Station.ID, Ending.Station.ID)
# dir.create(file.path("/Users/elizabethlin/desktop/co", "output"))
write.csv(all_stations, "all_stations.csv")
bike_table <- table(start = all_stations$Starting.Station.ID, end = all_stations$Ending.Station.ID)
start <- mutate(all_stations, start_num = length(unique(all_stations$Start.Station.ID)))
end <- mutate(all_stations, end_num = length(unique(all_stations$End.Station.ID)))
round_trip_num <- nrow(bikes %>% filter((Trip.Route.Category == "Round Trip")))
one_way_num <- nrow(bikes %>% filter((Trip.Route.Category == "One Way")))
compare_vector <- c(round_trip_num, one_way_num)
pct <- round(compare_vector/sum(compare_vector)*100)
lbls <- c("Round Trip", "One Way")
pie(compare_vector, col=c("#ff91d9", "#90fcff"), labels=lbls, main = "Distribution of Trip Routes")
lbls <- paste(lbls, pct) # add percents to labels
lbls <- paste(lbls,"%",sep="") # ad % to labels
library(dplyr)
library(car)
bikes <- read.csv("metro.csv", stringsAsFactors = FALSE)
names(bikes)
all_stations <- select(bikes, Starting.Station.ID, Ending.Station.ID)
# dir.create(file.path("/Users/elizabethlin/desktop/co", "output"))
write.csv(all_stations, "all_stations.csv")
bike_table <- table(start = all_stations$Starting.Station.ID, end = all_stations$Ending.Station.ID)
start <- mutate(all_stations, start_num = length(unique(all_stations$Start.Station.ID)))
end <- mutate(all_stations, end_num = length(unique(all_stations$End.Station.ID)))
round_trip_num <- nrow(bikes %>% filter((Trip.Route.Category == "Round Trip")))
one_way_num <- nrow(bikes %>% filter((Trip.Route.Category == "One Way")))
compare_vector <- c(round_trip_num, one_way_num)
pct <- round(compare_vector/sum(compare_vector)*100)
lbls <- c("Round Trip", "One Way")
lbls <- paste(lbls, pct) # add percents to labels
lbls <- paste(lbls,"%",sep="") # ad % to labels
pie(compare_vector, col=c("#ff91d9", "#90fcff"), labels=lbls, main = "Distribution of Trip Routes")
library(dplyr)
library(car)
bikes <- read.csv("metro.csv", stringsAsFactors = FALSE)
names(bikes)
all_stations <- select(bikes, Starting.Station.ID, Ending.Station.ID)
# dir.create(file.path("/Users/elizabethlin/desktop/co", "output"))
write.csv(all_stations, "all_stations.csv")
bike_table <- table(start = all_stations$Starting.Station.ID, end = all_stations$Ending.Station.ID)
start <- mutate(all_stations, start_num = length(unique(all_stations$Start.Station.ID)))
end <- mutate(all_stations, end_num = length(unique(all_stations$End.Station.ID)))
round_trip_num <- nrow(bikes %>% filter((Trip.Route.Category == "Round Trip")))
one_way_num <- nrow(bikes %>% filter((Trip.Route.Category == "One Way")))
compare_vector <- c(round_trip_num, one_way_num)
pct <- round(compare_vector/sum(compare_vector)*100)
lbls <- c("Round Trip", "One Way")
lbls <- paste(lbls, pct) # add percents to labels
lbls <- paste(lbls,"%",sep="") # ad % to labels
pie3D(compare_vector, col=c("#ff91d9", "#90fcff"), labels=lbls, main = "Distribution of Trip Routes")
library(dplyr)
library(car)
bikes <- read.csv("metro.csv", stringsAsFactors = FALSE)
names(bikes)
all_stations <- select(bikes, Starting.Station.ID, Ending.Station.ID)
# dir.create(file.path("/Users/elizabethlin/desktop/co", "output"))
write.csv(all_stations, "all_stations.csv")
bike_table <- table(start = all_stations$Starting.Station.ID, end = all_stations$Ending.Station.ID)
start <- mutate(all_stations, start_num = length(unique(all_stations$Start.Station.ID)))
end <- mutate(all_stations, end_num = length(unique(all_stations$End.Station.ID)))
round_trip_num <- nrow(bikes %>% filter((Trip.Route.Category == "Round Trip")))
one_way_num <- nrow(bikes %>% filter((Trip.Route.Category == "One Way")))
compare_vector <- c(round_trip_num, one_way_num)
pct <- round(compare_vector/sum(compare_vector)*100)
lbls <- c("Round Trip", "One Way")
lbls <- paste(lbls, pct) # add percents to labels
lbls <- paste(lbls,"%",sep="") # ad % to labels
pie(compare_vector, col=c("#ff91d9", "#90fcff"), labels=lbls, main = "Distribution of Trip Routes")
library(dplyr)
library(car)
bikes <- read.csv("metro.csv", stringsAsFactors = FALSE)
get_trip <- function(pass) {
combo_num <- nrow(bikes %>% filter((Passholder.Type == pass )))
}
monthly <- get_trip("Monthly Pass")
flex <- get_trip("Flex Pass")
my_combos <- c(monthly, flex)
barplot(my_combos, main = paste0("Breakdown of Passholder Type of all Riders"), horiz=FALSE,
names.arg=c("Monthly Pass", "Flex Pass"),
col=c("yellow", "purple"),
xlab = "Passholder Type",
ylab = "Number of Riders")
legend("topright", legend = c("RT = Round Trip", "OW = One Way", "MP = Montly Pass", "FP = Flex Pass", "WU = Walk-up"), col = c("#30bf10", "#ce0404", "white", "white", "white"), lwd=10)
library(dplyr)
library(car)
bikes <- read.csv("metro.csv", stringsAsFactors = FALSE)
get_trip <- function(pass) {
combo_num <- nrow(bikes %>% filter((Passholder.Type == pass )))
}
monthly <- get_trip("Monthly Pass")
flex <- get_trip("Flex Pass")
my_combos <- c(monthly, flex)
barplot(my_combos, main = paste0("Breakdown of Passholder Type of all Riders"), horiz=FALSE,
names.arg=c("Monthly Pass", "Flex Pass"),
col=c("yellow", "purple"),
xlab = "Passholder Type",
ylab = "Number of Riders")
library(dplyr)
library(car)
bikes <- read.csv("metro.csv", stringsAsFactors = FALSE)
get_trip <- function(pass) {
combo_num <- nrow(bikes %>% filter((Passholder.Type == pass )))
}
monthly <- get_trip("Monthly Pass")
flex <- get_trip("Flex Pass")
my_combos <- c(monthly, flex)
barplot(my_combos, main = paste0("Breakdown of Passholder Type of all Riders"), horiz=FALSE,
names.arg=c("Monthly Pass", "Flex Pass"),
col=c("yellow", "purple"),
xlab = "Passholder Type",
ylab = "Number of Riders")
View(bikes)
library(dplyr)
library(car)
source("metro-bike-share-stations.csv")
source("pop_route.csv")
bikes <- read.csv("metro.csv", stringsAsFactors = FALSE)
# names(bikes)
all_stations <- select(bikes, Starting.Station.ID, Ending.Station.ID)
write.csv(all_stations, "all_stations.csv")
bike_table <- table(start = all_stations$Starting.Station.ID, end = all_stations$Ending.Station.ID)
bike_table <- as.data.frame(bike_table)
write.csv(bike_table, "bike_table.csv")
##### Most Frequent Combo Route #####
max_freq <- max(as.vector(bike_table$Freq), na.rm = FALSE)
max_tab <- select(data.frame(filter(bike_table, Freq == max_freq)), "start", "end")
max_start <- sapply(max_tab$start, as.character)
max_end <- sapply(max_tab$end, as.character)
station_data <- read.csv("data/metro-bike-share-stations.csv", stringsAsFactors = FALSE)
station_data <- as.data.frame(station_data)
max_start_station_name <- select(data.frame(filter(station_data, station_data$Station_ID == max_start)), "Station_Name")
max_end_station_name <- select(data.frame(filter(station_data, station_data$Station_ID == max_end)), "Station_Name")
max_start_station_string <- sapply(max_start_station_name, as.character)
max_end_station_string <- sapply(max_end_station_name, as.character)
print(paste0("The most frequent/popular stop and start station combination is the route from ", max_start_station_string,
" to ", max_end_station_string, " with a count of ", max_freq, " rides."))
pop_routes <- read.csv("pop_route.csv", stringsAsFactors = FALSE)
